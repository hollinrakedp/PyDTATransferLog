name: Build Executable

on:
  workflow_dispatch:
  #push:
  #  branches:
  #    - main  # Trigger the workflow on pushes to the 'main' branch
  #pull_request:
  #  branches:
  #    - main  # Trigger the workflow on pull requests to the 'main' branch

env:
  PYTHON_VERSION: '3.13'

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for version tracking

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Update Version Information
        run: |
          mkdir -p src
          python scripts/update_version.py

      - name: Commit updated version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.txt src/version.py
          # Only commit if there are changes
          git diff --staged --quiet || git commit -m "Auto-increment build number [skip ci]"
          git push

  build:
    needs: update-version
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, rhel9]
        include:
          - os: windows-latest
            artifact-name: dta-transfer-log-windows
          - os: ubuntu-latest
            artifact-name: dta-transfer-log-ubuntu
          - os: rhel9
            artifact-name: dta-transfer-log-rhel9

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      # Step 2: Set up Python
      - name: Set up Python
        if: matrix.os != 'rhel9'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Step 2: Setup Python (RHEL9, self-hosted)
      - name: Setup Python on RHEL9
        if: matrix.os == 'rhel9'
        shell: bash
        run: |
          PYTHON_CMD="python${{ env.PYTHON_VERSION }}"

          # Ensure EPEL repository
          if ! dnf repolist enabled | grep -q epel; then
            echo "Installing EPEL repository..."
            sudo dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
          else
            echo "EPEL repository is already available"
          fi

          # Check if Python is already installed
          if ! command -v $PYTHON_CMD &> /dev/null; then
            echo "Installing Python ${{ env.PYTHON_VERSION }}..."
            sudo dnf install -y python${{ env.PYTHON_VERSION }} python${{ env.PYTHON_VERSION }}-pip python${{ env.PYTHON_VERSION }}-devel
          else
            echo "Python ${{ env.PYTHON_VERSION }} is already installed"
          fi
          $PYTHON_CMD --version

          # Create and activate virtual environment
          $PYTHON_CMD -m venv venv
          source venv/bin/activate
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

      # Step 3: Install dependencies
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt


      # Step 4: Build the executable
      - name: Build executable with PyInstaller
        run: |
          pyinstaller main.spec

      # Step 5: Verify the dist directory
      - name: Verify dist directory
        shell: bash
        run: ls -la dist

      # Step 6: Upload the executable as an artifact
      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: dist/
          retention-days: 7
